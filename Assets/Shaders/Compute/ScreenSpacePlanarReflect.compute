#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "Assets/Shaders/Functions/ValueMapping.hlsl"
#include "Assets/Shaders/Functions/DepthPreCompute.hlsl"

RWTexture2D<float4> _SSPRTex;
RWTexture2D<float> _ReDepthBufferRT;

Texture2D<half4> _CameraOpaqueTexture;
Texture2D<float> _CameraDepthTexture;
SAMPLER(sampler_CameraOpaqueTexture);
SAMPLER(sampler_CameraDepthTexture);

float2 _RTSize;
float _PlaneHeight;

#pragma kernel ScreenSpacePlanarReflect

[numthreads(8,8,1)]
void ScreenSpacePlanarReflect (uint3 id : SV_DispatchThreadID)
{
    _SSPRTex[id.xy]=float4(0,0,0,0);
    _ReDepthBufferRT[id.xy]= HALF_MAX;

    float2 screenUV=id.xy/_RTSize;
    float rawDepth=_CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture,screenUV,0).r;
    float3 positionWS=TransformNDCToWorld(screenUV,rawDepth);
    
    if(positionWS.y<=_PlaneHeight)
        return;
    
    //simple planar reflect
    float3 reflectPosWS=positionWS;
    reflectPosWS.y=-reflectPosWS.y+2*_PlaneHeight;
    
    float4 reflectPosCS=mul(_Matrix_VP,float4(reflectPosWS.xyz,1));
    float2 reflectUV=(reflectPosCS.xy/reflectPosCS.w)*0.5+0.5;
    #ifdef UNITY_UV_STARTS_AT_TOP
    reflectUV.y=1-reflectUV.y;
    #endif
    
    float2 earlyTest=abs(reflectUV-0.5);
    if(earlyTest.x>=0.5||earlyTest.y>=0.5)
        return;
    
    float4 color=_CameraOpaqueTexture.SampleLevel(sampler_CameraOpaqueTexture,screenUV,0);
    float2 reflectPixelIndex=reflectUV*_RTSize;
    if(positionWS.y<_ReDepthBufferRT[reflectPixelIndex])
    {
        _SSPRTex[reflectPixelIndex]=color;
        _ReDepthBufferRT[reflectPixelIndex]=positionWS.y;
    }
}

#pragma kernel FillHoles

[numthreads(8,8,1)]
void FillHoles(uint3 id:SV_DispatchThreadID)
{
    //fill holes each 2*2
    id.xy*=2;

    half4 center=_SSPRTex[id.xy+uint2(0,0)];
    half4 right=+_SSPRTex[id.xy+uint2(0,1)];
    half4 bottom=_SSPRTex[id.xy+uint2(1,0)];
    half4 bottomRight=_SSPRTex[id.xy+uint2(1,1)];

    half4 best=center;
    best=right.a>best.a+0.5?right:best;
    best=bottom.a>best.a+0.5?bottom:best;
    best=bottomRight.a>best.a+0.5?bottomRight:best;

    _SSPRTex[id.xy+uint2(0,0)]=best.a>center.a+0.5?best:center;
    _SSPRTex[id.xy+uint2(0,1)]=best.a>right.a+0.5?best:right;
    _SSPRTex[id.xy+uint2(1,0)]=best.a>bottom.a+0.5?best:bottom;
    _SSPRTex[id.xy+uint2(0,0)]=best.a>bottomRight.a+0.5?best:bottomRight;
}
